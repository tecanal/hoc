{
    "lessons": [
        {
            "name": "Variables",
            "blocks": [
                {
                    "type": "h1",
                    "content": "Variables"
                },
                {
                    "type": "p",
                    "content": "Think of a variable as a labeled container that can hold different kinds of things. Instead of holding food or clothes, variables hold data. Just as there are different types of containers, there are different types of variables. You <i>create</i> a variable, and <i>assign</i> it a value."
                },
                {
                    "type": "p",
                    "content": "In JavaScript, you can have a variable that changes value (<i>mutable</i>) or one that does not change value (<i>immutable</i>). For mutable variables, you use <b>let</b> and for immutable variables, you use <b>const</b>."
                },
                {
                    "type": "code",
                    "content": "const myName = \"Rees\";\n\nlet myAge = 19;"
                },
                {
                    "type": "p",
                    "content": "JavaScript is dynamically typed, which means that a variable with the same name can change the type of data at any moment during the program's runtime. With some other languages, you have to specify the type when you create the variable, but JavaScript is much more flexible in this regard."
                },
                {
                    "type": "code",
                    "content": "let myVariable = 5; // Number\nmyVariable = \"blah\"; // String\nmyVariable = false; // Boolean\nmyVariable = [1, 2, 3]; // Array"
                },
                {
                    "type": "p",
                    "content": "A more advanced type of JavaScript variables are something called objects. Objects are containers of properties and/or functions designated to make  certain tasks easier and safer through co-locating data and data actions."
                },
                {
                    "type": "code",
                    "content": "const moz = new Mosaic(5, 5);"
                }
            ]
        },
        {
            "name": "Operators",
            "blocks": [
                {
                    "type": "h1",
                    "content": "Operators"
                },
                {
                    "type": "p",
                    "content": "There are many types of operators in JavaScript, but we will only focus on two main ones, arithmetic operators and assignment operators."
                },
                {
                    "type": "p",
                    "content": "The arithmetic operators look just like the ones you would use in your math class."
                },
                {
                    "type": "code",
                    "content": "const four = 2 + 2; // Addition\nconst two = 5 - 3; // Subtraction\nconst eight = 4 * 2; // Multiplication\nconst three = 6 / 2; // Division\nconst one = 5 % 2; // Modulus (Remainder)"
                },
                {
                    "type": "p",
                    "content": "You have already seen the most basic assignment operator which is just the equals sign, but you can also combine the equals sign with an arithmetic operator to utilize different assignment operators that help save the amount of typing you have to do."
                },
                {
                    "type": "code",
                    "content": "let count = 5;\n\ncount += 4;\ncount -= 3;\ncount *= 1;\ncount /= 2;"
                },
                {
                    "type": "p",
                    "content": "If you are just adding or subtracting one from a variable, there are additional shorthand operators to help you."
                },
                {
                    "type": "code",
                    "content": "let count = 0;\n\ncount++;\ncount--;"
                }
            ]
        },
        {
            "name": "Calling Functions",
            "blocks": [
                {
                    "type": "h1",
                    "content": "Calling Functions"
                },
                {
                    "type": "p",
                    "content": "Functions are pieces of code that have been grouped together and can be called upon by a name. Functions can be attached to an object, or just for general use."
                },
                {
                    "type": "code",
                    "content": "alert();"
                },
                {
                    "type": "code",
                    "content": "console.clear();"
                },
                {
                    "type": "p",
                    "content": "When you call a function, you sometimes pass parameters to the function. There are pre-defined inputs that the function expects, you give them by putting them in parenthesis after the function name."
                },
                {
                    "type": "code",
                    "content": "console.log(\"Hello, World!\");"
                },
                {
                    "type": "code",
                    "content": "const moz = new Mosaic(10, 10);\nmoz.setTileColor(0, 0, \"black\";"
                }
            ]
        },
        {
            "name": "Conditionals",
            "blocks": [
                {
                    "type": "h1",
                    "content": "Conditionals"
                },
                { 
                    "type": "p",
                    "content": "Conditionals are statement that check conditions, which can be either true or false, and then do something depending on that state. Sometimes they are referred to as If-Then, Else statements."
                },
                {
                    "type": "code",
                    "content": "if (5 > 0) {\n\t// Do stuff here\n}\n\nif (myAge == 16) {\n\t// Do stuff here\n}\nelse {\n\t// Do stuff here\n}"
                },
                { 
                    "type": "p",
                    "content": "If you want to check multiple conditions after each other, you can use else if. If, else if, and else statements are evaluated in sequential order, so you must be careful. If you have an else or an else if, you must have an if before it, but if you have an if, you do not need anything additional."
                },
                {
                    "type": "code",
                    "content": "if (grade >= 90) {\n\t// Do stuff here\n}\nelse if (grade >= 80) {\n\t// Do stuff here\n}\nelse {\n\t// Do stuff here\n}"
                }
            ]
        },
        {
            "name": "Loops",
            "blocks": [
                {
                    "type": "h1",
                    "content": "Loops"
                },
                {
                    "type": "p",
                    "content": "There are three types of loops."
                },
                {
                    "type": "ol",
                    "blocks": [
                        {
                            "type": "li",
                            "content": "While Loop: This loop initially checks for a condition to be true, and will execute the body until that condition is false."
                        },
                        {
                            "type": "li",
                            "content": "Do-While Loop: This loop will execute the body and then check whether a condition is true or false to execute the body again or exit the loop."
                        },
                        {
                            "type": "li",
                            "content": "For Loop: This loop will execute the body until the counter variable meets a defined condition."
                        }
                    ]
                },
                {
                    "type": "code",
                    "content": "let count = 0;\nwhile (count < 5) {\n\tcount = count + 1;\n}"
                },
                {
                    "type": "p",
                    "content": "A for loop header has the 1. variable initialization, 2. the condition, and 3. the variable mutation."
                },
                {
                    "type": "ol",
                    "blocks": [
                        {
                            "type": "li",
                            "content": "Variable initialization only happens at the first iteration (a.k.a run through) of the loop. It sets up our counter."
                        },
                        {
                            "type": "li",
                            "content": "The condition is checked before every iteration to check if the loop should run or not."
                        },
                        {
                            "type": "li",
                            "content": "The variable is then mutated, you can do any math operation you want to on the variable."
                        }
                    ]
                },
                {
                    "type": "code",
                    "content": "for (let i = 0; i < moz.width; i++) {\n\t// Do stuff here \n}"
                },
                {
                    "type": "p",
                    "content": "You can also put loops inside of other loops, this is called nesting. The inner loops finish first, then goes outwards."
                }
            ]
        },
        {
            "name": "Creating Functions",
            "blocks": [
                {
                    "type": "h1",
                    "content": "Creating Functions"
                },
                {
                    "type": "p",
                    "content": "As previously written, functions are lines of code that have been grouped together and can be called upon by a name. These functions can take inputs called parameters, and can return outputs."
                },
                {
                    "type": "p",
                    "content": "You can have two functions with the same name, as long as they have different parameters, or orders of parameters. This is called function overloading."
                },
                {
                    "type": "code",
                    "content": "const moz = new Mosaic(5, 5);\n\nfunction drawLine() {\n\tfor (let x = 0; x < moz.width; x++) {\n\t\tmoz.setTileColor(x, 0, \"blue\");\n\t}\n}"
                }
            ]
        }
    ]
}