{
    "lessons": [
        {
            "name": "What is Code?",
            "blocks": [
                {
                    "type": "h1",
                    "content": "What is Code?"
                },
                {
                    "type": "p",
                    "content": "Code is a way to write a step-by-step guide for the computer to do what you (the programmer) want to do. As you may or may not know, code is not written in plain, human English. Instead, they are written in <b>programming languages</b>. Just like out in the world, there are many different programming languages. The language that you will be learning throughout the next hour is called <b>JavaScript</b>."
                },
                {
                    "type": "p",
                    "content": "The code you see in the editor right now consists of four <b>functions</b>. A <b>function</b> is a name that correspond to a chunk of code that does a certain task."
                },
                {
                    "type": "p",
                    "content": "<b>fill()</b> sets the color of a tile at the given (x, y) coordinate. <b>setFillColor()</b> does exactly that it sounds like, it sets the fill color that the <b>fill()</b> function uses. When creating functions, programmers like you need to choose <i>descriptive</i> names so that other people know what's going on."
                },
                {
                    "type": "p",
                    "content": "Most of the time, but not always, functions expect values called <b>parameters</b>. These are important pieces of data that allow the function to do the work it was designed to do. In the case of the <b>fill()</b> function, it takes a Number parameter <i>x</i> and a Number parameter <i>y</i>."
                },
                {
                    "type": "h2",
                    "content": "Your Task"
                },
                {
                    "type": "p",
                    "content": "Your task for this level is just to hit the Run Code button to see the code in action. If you changed the code in the editor, it is below for you to copy back into the editor."
                },
                {
                    "type": "code",
                    "content": "setFillColor(\"black\");\nfill(0, 0);\n\nsetStrokeColor(\"red\");\nstroke(0, 0);"
                }
            ]
        },
        {
            "name": "Variables",
            "blocks": [
                {
                    "type": "h1",
                    "content": "Variables"
                },
                {
                    "type": "p",
                    "content": "Think of a variable as a labeled container that can hold different kinds of things. Instead of holding food or clothes, variables hold data. Just as there are different types of containers, there are different types of variables. You <i>create</i> a variable, and <i>assign</i> it a value."
                },
                {
                    "type": "p",
                    "content": "In JavaScript, you use the <b>let</b> keyword to define a variable."
                },
                {
                    "type": "code",
                    "content": "let thisIsTheVariableName = \"JavaScript is cool.\";"
                },
                {
                    "type": "p",
                    "content": "JavaScript is dynamically typed, which means that a variable with the same name can change the type of data at any moment during the program's runtime. With some other languages, you have to write the type when you create the variable, but JavaScript's system is much more flexible. Below are the basic types in JavaScript, but we will mostly be using Numbers, Strings, and Booleans during this hour."
                },
                {
                    "type": "code",
                    "content": "let myVariable = 5; // Number\nmyVariable = \"purple\"; // String\nmyVariable = false; // Boolean\nmyVariable = [1, 2, 3]; // Array"
                },
                {
                    "type": "p",
                    "content": "You have already seen the most basic assignment operator which is just the equals sign, but you can also combine the equals sign with an arithmetic operator to utilize different assignment operators that help save the amount of typing you have to do."
                },
                {
                    "type": "code",
                    "content": "let count = 5;\n\ncount += 4;\ncount -= 3;\ncount *= 1;\ncount /= 2;"
                },
                {
                    "type": "p",
                    "content": "If you are just adding or subtracting one from a variable, there are additional shorthand operators to help you."
                },
                {
                    "type": "code",
                    "content": "let count = 0;\n\ncount++;\ncount--;"
                },
                {
                    "type": "h2",
                    "content": "Your Task"
                },
                {
                    "type": "p",
                    "content": "Your task for this level is to create a variable called <i>myFavoriteColor</i> and use <b>setFillColor()</b> and <b>fill()</b> to color the tile at (0, 1) to be your favorite color. For the purpose of this activity, choose between the following colors:"
                },
                {
                    "type": "ul",
                    "blocks": [
                        {
                            "type": "li",
                            "content": "red"
                        },
                        {
                            "type": "li",
                            "content": "green"
                        },
                        {
                            "type": "li",
                            "content": "blue"
                        },
                        {
                            "type": "li",
                            "content": "yellow"
                        },
                        {
                            "type": "li",
                            "content": "purple"
                        }
                    ]
                }
            ]
        },
        {
            "name": "Conditionals and Loops",
            "blocks": [
                {
                    "type": "h1",
                    "content": "Conditionals"
                },
                { 
                    "type": "p",
                    "content": "Conditionals are statement that check conditions, which can be either true or false, and then do something depending on that state. Sometimes they are referred to as If-Then, Else statements."
                },
                {
                    "type": "code",
                    "content": "if (5 > 0) {\n\t// Do stuff here\n}\n\nif (myAge == 16) {\n\t// Do stuff here\n}\nelse {\n\t// Do stuff here\n}"
                },
                { 
                    "type": "p",
                    "content": "If you want to check multiple conditions after each other, you can use else if. If, else if, and else statements are evaluated in sequential order, so you must be careful. If you have an else or an else if, you must have an if before it, but if you have an if, you do not need anything additional."
                },
                {
                    "type": "p",
                    "content": "You can also put if statements inside of other if statements, this is called <b>nesting</b>."
                },
                {
                    "type": "code",
                    "content": "if (grade >= 90) {\n\tif (grade >= 94) {\n\t\t// A+\n\t}\n\telse {\n\t\t// A\n\t}\n}\nelse if (grade >= 80) {\n\t// Do stuff here\n}\nelse {\n\t// Do stuff here\n}"
                },
                {
                    "type": "h1",
                    "content": "Loops"
                },
                {
                    "type": "p",
                    "content": "There are two main types of loops."
                },
                {
                    "type": "ol",
                    "blocks": [
                        {
                            "type": "li",
                            "content": "While Loop: This loop initially checks for a condition to be true, and will execute the body until that condition is false."
                        },
                        {
                            "type": "li",
                            "content": "For Loop: This loop will execute the body until the counter variable meets a defined condition."
                        }
                    ]
                },
                {
                    "type": "code",
                    "content": "let count = 0;\nwhile (count < 5) {\n\tcount = count + 1;\n}"
                },
                {
                    "type": "p",
                    "content": "A for loop header has the 1. variable initialization, 2. the condition, and 3. the variable mutation."
                },
                {
                    "type": "ol",
                    "blocks": [
                        {
                            "type": "li",
                            "content": "Variable initialization only happens at the first iteration (a.k.a run through) of the loop. It sets up our counter."
                        },
                        {
                            "type": "li",
                            "content": "The condition is checked before every iteration to check if the loop should run or not."
                        },
                        {
                            "type": "li",
                            "content": "The variable is then mutated, you can do any math operation you want to on the variable."
                        }
                    ]
                },
                {
                    "type": "code",
                    "content": "for (let x = 0; x < getWidth(); x++) {\n\t// Do stuff here \n}"
                },
                {
                    "type": "p",
                    "content": "You can also put loops inside of other loops, this is called <b>nesting</b>. The inner loops finish first, then goes outwards."
                },
                {
                    "type": "code",
                    "content": "for (let x = 0; x < getWidth(); x++) {\n\tfor (let y = 0; y < getHeight(); y++) {\n\t\t// Do stuff here\n\t}\n}"
                },
                {
                    "type": "h2",
                    "content": "Your Task"
                },
                {
                    "type": "p",
                    "content": "Your task is to use the <b>Color.random()</b> function to color the tiles in the grid that have an even <i>x</i> coordinate and an even <i>y</i> coordinate a random color. If you find yourself to be stuck, look at the code snippets below for some hints."
                },
                {
                    "type": "code",
                    "content": "// % is modulo division which means do division but only keep the remainders\nif (x % 2 == 0) {\n\t// Divided by two with no remainder means it's even\n}"
                },
                {
                    "type": "code",
                    "content": "fill(0, 0, Color.random());"
                }
            ]
        },
        {
            "name": "Creating Functions",
            "blocks": [
                {
                    "type": "h1",
                    "content": "Creating Functions"
                },
                {
                    "type": "p",
                    "content": "As previously written, functions are lines of code that have been grouped together and can be called upon by a name. These functions can take inputs called parameters, and can return outputs."
                },
                {
                    "type": "code",
                    "content": "function drawLine() {\n\tfor (let x = 0; x < getWidth(); x++) {\n\t\tfill(x, 0, \"blue\");\n\t}\n}\n\ndrawLine();"
                },
                {
                    "type": "p",
                    "content": "We can modify the drawLine() function in order to take a Number parameter <i>y</i> so that we can now draw a horizontal line at whatever y position we want."
                },
                {
                    "type": "code",
                    "content": "function drawLine(y) {\n\tfor (let x = 0; x < getWidth(); x++) {\n\t\tfill(x, y, \"blue\");\n\t}\n}\n\ndrawLine(2);"
                },
                {
                    "type": "p",
                    "content": "Below is an example of a function that returns a value. There are all kinds of reasons you would want to do this, like doing calculations."
                },
                {
                    "type": "code",
                    "content": "function getMyFavoriteColor() {\n\treturn \"green\";\n}\n\nsetFillColor(getMyFavoriteColor());\nfill(0, 0);"
                },
                {
                    "type": "h2",
                    "content": "Your Task"
                },
                {
                    "type": "p",
                    "content": "Make a function called fillRect() that has four number parameters: x1, y1, x2, y2. You can use the code below as a way to get started. fill a rectangle that starts at (0, 0) and has a length of 5 and a height of 3. It can be any color, but it must be a rectange of the given dimensions. Nothing else should be drawn on the grid."
                },
                {
                    "type": "code",
                    "content": "function fillRect(x1, y1, x2, y2) {\n\t// Do stuff here\n}\n\nfillRect(0, 0, 4, 2);"
                }
            ]
        },
        {
            "name": "Setting Intervals",
            "blocks": [
                {
                    "type": "h1",
                    "content": "Setting Intervals"
                },
                {
                    "type": "p",
                    "content": "An interval is something like a loop. It allows a function to be called on an interval, infinitely (or until you clear the interval)."
                },
                {
                    "type": "p",
                    "content": "In the code below you see function declaration, but you may notice that there is no name. This is called an <b>anonymous function</b>. This just means that there is no name associated it, and this is because we have no need for it to have a name since it will be automatically called on the interval."
                },
                {
                    "type": "code",
                    "content": "setInterval(function() {\n\t// Do stuff here\n}, 100);"
                },
                {
                    "type": "p",
                    "content": "The first parameter of setInterval is a function and the second is the interval, in milliseconds."
                },
                {
                    "type": "h2",
                    "content": "Your Task"
                },
                {
                    "type": "p",
                    "content": "Your task is to have the middle four tiles [(4, 4), (5, 4), (4, 5), (5, 5)] alternate between blue and orange every half second (500 ms). The tiles should be colored blue before the interval function even starts."
                },
                {
                    "type": "p",
                    "content": "If you get stuck, look at the code snippet below for a hint."
                },
                {
                    "type": "code",
                    "content": "// You can use this function to get the fill color of a tile\ngetFill(4, 4)"
                }
            ]
        },
        {
            "name": "Handling User Interaction Events",
            "blocks": [
                {
                    "type": "h1",
                    "content": "Handling User Interaction Events"
                },
                {
                    "type": "p",
                    "content": "Event listening is when you bind a function to something, in this case, a tile in the grid, and wait  (listen) for that event to happen. This will allow for us to have <b>user interaction</b>."
                },
                {
                    "type": "p",
                    "content": "Just like with <b>setInterval()</b> we also use anonymous functions for event listening."
                },
                {
                    "type": "p",
                    "content": "Click listeners will call the function whenever the user clicks on it."
                },
                {
                    "type": "code",
                    "content": "onClick(0, 0, function() {\n\t// Do stuff here\n});"
                },
                {
                    "type": "p",
                    "content": "Mouseover listeners will call the function whenever the user moves their mouse over it."
                },
                {
                    "type": "code",
                    "content": "onMouseOver(0, 0, function() {\n\t// Do stuff here\n});"
                },
                {
                    "type": "h2",
                    "content": "Your Task"
                },
                {
                    "type": "p",
                    "content": "Your task is to add a click listener to every tile in the grid. You should initially set all tiles to blue. When the tile is clicked it should check the fill color. If the tile is blue, then turn the tile to red. If the tile is red, turn it to blue."
                }
            ]
        }
    ]
}